var $api=new apiUtils.Api(apiUrl+"/pages/shared/tableValidate"),data={allRules:[{type:"required",text:"字段为必填项"},{type:"numeric",text:"字段必须仅包含数字"},{type:"email",text:"字段必须是有效的电子邮件"},{type:"mobile",text:"字段必须是有效的手机号码"},{type:"url",text:"字段必须是有效的url"},{type:"alpha",text:"字段只能包含英文字母"},{type:"alpha_dash",text:"字段只能包含英文字母、数字、破折号或下划线"},{type:"alpha_num",text:"字段只能包含英文字母或数字"},{type:"alpha_spaces",text:"字段只能包含英文字母或空格"},{type:"credit_card",text:"字段必须是有效的信用卡"},{type:"between",text:"字段必须有一个以最小值和最大值为界的数值"},{type:"decimal",text:"字段必须是数字，并且可能包含指定数量的小数点"},{type:"digits",text:"字段必须是整数，并且具有指定的位数"},{type:"included",text:"字段必须具有指定列表中的值"},{type:"excluded",text:"字段不能具有指定列表中的值"},{type:"ip",text:"字段必须是一个有效的ipv4值的字符串"},{type:"max",text:"字段不能超过指定的长度"},{type:"max_value",text:"字段必须是数值，并且不能大于指定的值"},{type:"min",text:"字段不能低于指定的长度"},{type:"min_value",text:"字段必须是数值，并且不能小于指定的值"},{type:"regex",text:"字段必须匹配指定的正则表达式"}],tableName:pageUtils.getQueryStringByName("tableName"),attributeName:pageUtils.getQueryStringByName("attributeName"),relatedIdentities:pageUtils.getQueryStringByName("relatedIdentities"),pageLoad:!1,pageAlert:null,pageType:"list",validateRules:[],ruleType:null,ruleValue:null,betweenMin:null,betweenMax:null,decimals:null,digitsLength:null,includedList:null,maxLength:null,maxValue:null,minLength:null,minValue:null,excludedList:null,regexValue:null},methods={getValue(){return 0===this.validateRules.length?"":_.map(this.validateRules,function(e){return e.value?e.type+":"+e.value:e.type}).join("|")},load:function(){var e=this;$api.get({tableName:this.tableName,attributeName:this.attributeName,relatedIdentities:this.relatedIdentities},function(t,l){if(e.pageLoad=!0,!t&&l){var a="";try{if(l.value){a=l.value;for(var i=0;i<a.split("|").length;i++){var u=a.split("|")[i];-1===u.indexOf(":")?e.validateRules.push({type:u,value:null}):e.validateRules.push({type:u.split(":")[0],value:u.split(":")[1]})}}}catch(e){}}})},btnSubmitClick:function(){var e=this;this.$validator.validate().then(function(t){t&&(pageUtils.loading(!0),$api.post({tableName:e.tableName,attributeName:e.attributeName,relatedIdentities:e.relatedIdentities,value:e.getValue()},function(t,l){pageUtils.loading(!1),!t&&l?(parent.reloadPage(),pageUtils.closeLayer()):e.pageAlert={type:"danger",html:t.message}}))})},btnRemoveClick:function(e){this.validateRules.splice(e,1)},btnAddClick:function(){this.ruleType=null,this.pageType="add"},btnSaveClick:function(){var e=this;this.$validator.validate().then(function(t){t&&(e.validateRules.push({type:e.ruleType,value:e.getRuleValue()}),e.pageType="list")})},btnCancelClick:function(){this.pageType="list"},getDescription(e){var t=_.findIndex(this.allRules,function(t){return t.type==e});return-1!==t?this.allRules[t].text:""},getRuleValue(){return"between"===this.ruleType?this.betweenMin+","+this.betweenMax:"decimal"===this.ruleType?this.decimals:"digits"===this.ruleType?this.digitsLength:"included"===this.ruleType?this.includedList:"max"===this.ruleType?this.maxLength:"max_value"===this.ruleType?this.maxValue:"min"===this.ruleType?this.minLength:"min_value"===this.ruleType?this.minValue:"excluded"===this.ruleType?this.excludedList:"regex"===this.ruleType?this.regexValue:""},getAvaliableRules(){for(var e=[],t=0;t<this.allRules.length;t++){var l=this.allRules[t];-1===_.findIndex(this.validateRules,function(e){return e.type==l.type})&&e.push(this.allRules[t])}return e}};new Vue({el:"#main",data:data,methods:methods,created:function(){this.load()}});